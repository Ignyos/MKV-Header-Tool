<Project Sdk="Microsoft.NET.Sdk.Razor">
  <PropertyGroup>
    <TargetFrameworks>net9.0-android;net9.0-ios;net9.0-maccatalyst</TargetFrameworks>
    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net9.0-windows10.0.19041.0</TargetFrameworks>
    <!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
    <!-- <TargetFrameworks>$(TargetFrameworks);net9.0-tizen</TargetFrameworks> -->
    <!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
    <!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->
    <OutputType>Exe</OutputType>
    <RootNamespace>AppShell</RootNamespace>
    <UseMaui>true</UseMaui>
    <SingleProject>true</SingleProject>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <!-- Display name -->
    <ApplicationTitle>MKV Header Tool</ApplicationTitle>
    <!-- App Identifier -->
    <ApplicationId>com.ignyos.mkvheadertool</ApplicationId>
    <!-- Versions -->
    <ApplicationDisplayVersion>1.0.0</ApplicationDisplayVersion>
    <ApplicationVersion>1</ApplicationVersion>
    <!-- App metadata -->
    <Product>MKV Header Tool</Product>
    <AssemblyTitle>MKV Header Tool</AssemblyTitle>
    <Description>A tool specifically for viewing and modifying MKV file headers</Description>
    <Company>Ignyos</Company>
    <!-- Use plain ASCII to avoid encoding issues in tooling -->
    <Copyright>Copyright (c) Ignyos 2025</Copyright>
    <!-- Windows Application Icon - Custom MKV icon for Windows only -->
    <ApplicationIcon Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">Resources\AppIcon\systray32.ico</ApplicationIcon>
    <!-- To develop, package, and publish an app to the Microsoft Store, see: https://aka.ms/MauiTemplateUnpackaged -->
    <WindowsPackageType>None</WindowsPackageType>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">15.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">15.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">23.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
  </PropertyGroup>
  <ItemGroup>
    <!-- Remove all MAUI icon/splash processing to avoid XML issues -->
    <!-- Keep appicon.svg as base resource but don't process it -->
    
    <!-- Images - Remove automatic processing -->
    <!-- <MauiImage Include="Resources\Images\*" /> -->
    <!-- <MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" /> -->
    
    <!-- Custom Fonts -->
    <MauiFont Include="Resources\Fonts\*" />
    
    <!-- Raw Assets - Remove to avoid conflicts -->
    <!-- <MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" /> -->
    
    <!-- MKV Tools - Copy to output directory -->
    <None Include="Resources\mkvpropedit.exe">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="Resources\mkvmerge.exe">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    
    <!-- Only include the ICO file we actually use -->
    <EmbeddedResource Include="Resources\AppIcon\systray32.ico">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    
    <!-- Keep appicon.svg as a None item (not processed, just available) -->
    <None Include="Resources\AppIcon\appicon.svg" />
  </ItemGroup>
  <ItemGroup>
    <!-- Blazor will automatically include wwwroot files as static web assets, so we don't need MauiAsset for them -->
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="9.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebView.Maui" Version="$(MauiVersion)" />
  </ItemGroup>
</Project>